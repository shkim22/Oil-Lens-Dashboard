{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Q6UD-X4HjL25_BK-uEvP7rhGAcRz6-rT","timestamp":1729392465681}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install Rbeast"],"metadata":{"id":"GB5Kfmswx78P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732182183465,"user_tz":360,"elapsed":10005,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"outputId":"760eea4c-9fdb-46cc-8553-b6121bc3b4b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting Rbeast\n","  Downloading Rbeast-0.1.23-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (30 kB)\n","Requirement already satisfied: numpy>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from Rbeast) (1.26.4)\n","Downloading Rbeast-0.1.23-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.5 MB)\n","\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.5 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m38.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: Rbeast\n","Successfully installed Rbeast-0.1.23\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xaBW41NugjD3"},"outputs":[],"source":["import os\n","import pandas as pd\n","import Rbeast as rb\n","\n","api_key = \"71d5f5dd-78a5-4a12-a950-5994cf6d7a71\"\n","data_endpoint = \"https://api.energyaspects.com/data/timeseries/csv\"\n","metadata_endpoint = \"https://api.energyaspects.com/data/datasets/timeseries\"\n","\n","\n","def get_metadata(url:str = metadata_endpoint, key:str = api_key):\n","  df = pd.read_json(url + \"?api_key=\" + key)\n","  for k in df.metadata[0].keys():\n","    df[k] = df.metadata.apply(lambda x: x[k])\n","  del df['metadata']\n","\n","  return df\n","\n","\n","def get_data(\n","    dataset_ids: list[int],\n","    url:str = data_endpoint,\n","    key:str = api_key,\n","    date_from:str = None\n","):\n","    ids = ','.join([str(x) for x in dataset_ids])\n","    url = url + \"?api_key=\" + key + \"&dataset_id=\" + ids\n","    if date_from:\n","      url += \"&date_from=\" + date_from\n","\n","    df = pd.read_csv(url)\n","    return df"]},{"cell_type":"code","source":["# Get metadata and description of every availiable time-series dataset\n","df_metadata = get_metadata()\n","df_metadata.to_csv(\"metadata.csv\")\n","\n","\n","# # price datasets... only forecasts available\n","# price_datasets = df_metadata.loc[ df_metadata['aspect'] == 'price']\n","# date_from = min(price_datasets.date_from_min)\n","# df = get_data(price_datasets.dataset_id, date_from=date_from)\n","# df.to_csv(\"prices.csv\")\n","\n","\n","stock_datasets = df_metadata.loc[\n","  (df_metadata['lifecycle_stage'] == 'actual')\n","  & (df_metadata['aspect_subtype'] == 'stock_level')\n","  & (df_metadata['frequency'] == 'monthly'  ),\n","  :]\n","\n","date_from = min(stock_datasets.date_from_min)\n","df = get_data(stock_datasets.dataset_id, date_from = date_from)\n","df.to_csv(\"inventories.csv\")\n","\n","print(stock_datasets)\n"],"metadata":{"id":"RSqP7VWXqL06","executionInfo":{"status":"ok","timestamp":1732182214024,"user_tz":360,"elapsed":6953,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4d5b614a-d9dc-4c1d-9cca-f93295cf7c73","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      dataset_id additional_fields  \\\n","16            17                {}   \n","17            18                {}   \n","18            19                {}   \n","19            20                {}   \n","20            21                {}   \n","...          ...               ...   \n","1247        1526                {}   \n","1248        1527                {}   \n","1249        1528                {}   \n","1250        1529                {}   \n","2789        3355                {}   \n","\n","                                            description                source  \\\n","16    Monthly crude oil refinery inventories in Unit...  BEIS, Energy Aspects   \n","17    Monthly crude oil terminal inventories in Unit...  BEIS, Energy Aspects   \n","18    Monthly crude oil offshore inventories in Unit...  BEIS, Energy Aspects   \n","19    Monthly crude oil inventories in United Kingdo...  BEIS, Energy Aspects   \n","20    Monthly gasoline inventories in United Kingdom...  BEIS, Energy Aspects   \n","...                                                 ...                   ...   \n","1247      Monthly gasoline inventories in Tunisia in kb  JODI, Energy Aspects   \n","1248  Monthly middle distillate inventories in Tunis...  JODI, Energy Aspects   \n","1249      Monthly fuel oil inventories in Tunisia in kb  JODI, Energy Aspects   \n","1250  Monthly total product inventories in Tunisia i...  JODI, Energy Aspects   \n","2789        Monthly kerosene stock level in China in mb        Energy Aspects   \n","\n","     date_from_min date_to_max   aspect aspect_subtype      category  \\\n","16      2012-01-01  2079-01-01  storage    stock_level     crude_oil   \n","17      2012-01-01  2079-01-01  storage    stock_level     crude_oil   \n","18      2012-01-01  2079-01-01  storage    stock_level     crude_oil   \n","19      2012-01-01  2079-01-01  storage    stock_level     crude_oil   \n","20      2012-01-01  2079-01-01  storage    stock_level  oil_products   \n","...            ...         ...      ...            ...           ...   \n","1247    2000-01-01  2079-01-01  storage    stock_level  oil_products   \n","1248    2000-01-01  2079-01-01  storage    stock_level  oil_products   \n","1249    2000-01-01  2079-01-01  storage    stock_level  oil_products   \n","1250    2000-01-01  2079-01-01  storage    stock_level  oil_products   \n","2789    2009-01-01  2024-12-01  storage    stock_level  oil_products   \n","\n","     category_subtype frequency lifecycle_stage region  unit         country  \\\n","16               None   monthly          actual    EUR    kt  United_Kingdom   \n","17               None   monthly          actual    EUR    kt  United_Kingdom   \n","18               None   monthly          actual    EUR    kt  United_Kingdom   \n","19               None   monthly          actual    EUR    kt  United_Kingdom   \n","20           gasoline   monthly          actual    EUR    kt  United_Kingdom   \n","...               ...       ...             ...    ...   ...             ...   \n","1247         gasoline   monthly          actual    AFR  kbbl         Tunisia   \n","1248           gasoil   monthly          actual    AFR  kbbl         Tunisia   \n","1249         fuel_oil   monthly          actual    AFR  kbbl         Tunisia   \n","1250             None   monthly          actual    AFR  kbbl         Tunisia   \n","2789         kerosene   monthly          actual     AP  Mbbl           China   \n","\n","     country_iso sub_region licensed  \n","16            GB       None      yes  \n","17            GB       None      yes  \n","18            GB       None      yes  \n","19            GB       None      yes  \n","20            GB       None      yes  \n","...          ...        ...      ...  \n","1247          TN       None      yes  \n","1248          TN       None      yes  \n","1249          TN       None      yes  \n","1250          TN       None      yes  \n","2789          CN       None      yes  \n","\n","[102 rows x 18 columns]\n"]}]},{"cell_type":"code","source":["df_metadata = get_metadata()\n","df_metadata.to_csv(\"metadata.csv\")\n","\n","stock_datasets = df_metadata.loc[\n","  (df_metadata['lifecycle_stage'] == 'actual')\n","  & (df_metadata['aspect_subtype'] == 'stock_level')\n","  & (df_metadata['frequency'] == 'monthly'  ),\n","  :]\n","\n","def get_individualdata(\n","    dataset_id: list,\n","    url:str = data_endpoint,\n","    key:str = api_key,\n","    date_from:str = None\n","):\n","\n","    url = url + \"?api_key=\" + key + \"&dataset_id=\" + str(dataset_id)\n","    if date_from:\n","      url += \"&date_from=\" + date_from\n","\n","    df = pd.read_csv(url)\n","    return df\n","\n","\n","\n","def get_beast_data(df_metadata):\n","  beast_dict = {}\n","\n","  for index, row in df_metadata.iterrows():\n","    #print(row['dataset_id'])\n","    #print(row['description'])\n","    #print(row['date_from_min'])\n","    df = get_individualdata(row['dataset_id'], date_from = row['date_from_min'])\n","    desc = row['description']\n","\n","    try:\n","        beast = rb.beast( df[desc])\n","    except:\n","        beast = None\n","\n","\n","    beast_dict[desc] = beast\n","    #print(desc)\n","    #print(beast)\n","  return beast_dict\n","\n","\n","beast_dict = get_beast_data(stock_datasets)\n","print(beast_dict)\n","#get_arima_data(stock_datasets)"],"metadata":{"id":"VciiYU5VLCaO","executionInfo":{"status":"ok","timestamp":1732183984152,"user_tz":360,"elapsed":156266,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"40bc2be3-df8d-4010-d454-0f921dff585b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 4 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 4/1 = 4\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 4          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 2          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 2          # sseg_leftmargin : no season chngpts in the first 2 datapoints\n","prior.seasonRightMargin = 2          # sseg_rightmargin: no season chngpts in the last 2 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 3 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 3/1 = 3\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 3          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 1          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 1          # sseg_leftmargin : no season chngpts in the first 1 datapoints\n","prior.seasonRightMargin = 1          # sseg_rightmargin: no season chngpts in the last 1 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 5 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 5/1 = 5\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 5          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 2          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 2          # sseg_leftmargin : no season chngpts in the first 2 datapoints\n","prior.seasonRightMargin = 2          # sseg_rightmargin: no season chngpts in the last 2 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 21 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 21/1 = 21\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 21         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 10         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 10         # sseg_leftmargin : no season chngpts in the first 10 datapoints\n","prior.seasonRightMargin = 10         # sseg_rightmargin: no season chngpts in the last 10 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 10         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 10         # tseg_leftmargin : no trend chngpts in the first 10 datapoints\n","prior.trendRightMargin  = 10         # tseg_rightmargin: no trend chngpts in the last 10 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 3 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 3/1 = 3\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 3          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 1          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 1          # sseg_leftmargin : no season chngpts in the first 1 datapoints\n","prior.seasonRightMargin = 1          # sseg_rightmargin: no season chngpts in the last 1 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 129\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 5 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 5/1 = 5\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 5          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 2          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 2          # sseg_leftmargin : no season chngpts in the first 2 datapoints\n","prior.seasonRightMargin = 2          # sseg_rightmargin: no season chngpts in the last 2 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 27 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 27/1 = 27\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 27         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 9          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 13         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 13         # sseg_leftmargin : no season chngpts in the first 13 datapoints\n","prior.seasonRightMargin = 13         # sseg_rightmargin: no season chngpts in the last 13 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 9          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 13         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 13         # tseg_leftmargin : no trend chngpts in the first 13 datapoints\n","prior.trendRightMargin  = 13         # tseg_rightmargin: no trend chngpts in the last 13 datapoints\n","prior.K_MAX             = 120        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 60 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 60/1 = 60\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 60         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 3          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 30         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 30         # sseg_leftmargin : no season chngpts in the first 30 datapoints\n","prior.seasonRightMargin = 30         # sseg_rightmargin: no season chngpts in the last 30 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 3          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 30         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 30         # tseg_leftmargin : no trend chngpts in the first 30 datapoints\n","prior.trendRightMargin  = 30         # tseg_rightmargin: no trend chngpts in the last 30 datapoints\n","prior.K_MAX             = 48         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 14 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 14/1 = 14\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 14         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 7          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 7          # sseg_leftmargin : no season chngpts in the first 7 datapoints\n","prior.seasonRightMargin = 7          # sseg_rightmargin: no season chngpts in the last 7 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 7          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 7          # tseg_leftmargin : no trend chngpts in the first 7 datapoints\n","prior.trendRightMargin  = 7          # tseg_rightmargin: no trend chngpts in the last 7 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 151\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 27 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 27/1 = 27\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 27         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 9          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 13         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 13         # sseg_leftmargin : no season chngpts in the first 13 datapoints\n","prior.seasonRightMargin = 13         # sseg_rightmargin: no season chngpts in the last 13 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 9          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 13         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 13         # tseg_leftmargin : no trend chngpts in the first 13 datapoints\n","prior.trendRightMargin  = 13         # tseg_rightmargin: no trend chngpts in the last 13 datapoints\n","prior.K_MAX             = 120        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 153\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 48 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 48/1 = 48\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 48         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 8          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 24         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 24         # sseg_leftmargin : no season chngpts in the first 24 datapoints\n","prior.seasonRightMargin = 24         # sseg_rightmargin: no season chngpts in the last 24 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 8          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 24         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 24         # tseg_leftmargin : no trend chngpts in the first 24 datapoints\n","prior.trendRightMargin  = 24         # tseg_rightmargin: no trend chngpts in the last 24 datapoints\n","prior.K_MAX             = 108        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 48 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 48/1 = 48\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 48         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 8          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 24         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 24         # sseg_leftmargin : no season chngpts in the first 24 datapoints\n","prior.seasonRightMargin = 24         # sseg_rightmargin: no season chngpts in the last 24 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 8          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 24         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 24         # tseg_leftmargin : no trend chngpts in the first 24 datapoints\n","prior.trendRightMargin  = 24         # tseg_rightmargin: no trend chngpts in the last 24 datapoints\n","prior.K_MAX             = 108        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 24 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 24/1 = 24\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 24         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 12         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 12         # sseg_leftmargin : no season chngpts in the first 12 datapoints\n","prior.seasonRightMargin = 12         # sseg_rightmargin: no season chngpts in the last 12 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 12         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 12         # tseg_leftmargin : no trend chngpts in the first 12 datapoints\n","prior.trendRightMargin  = 12         # tseg_rightmargin: no trend chngpts in the last 12 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 22 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 22/1 = 22\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 22         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 11         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 11         # sseg_leftmargin : no season chngpts in the first 11 datapoints\n","prior.seasonRightMargin = 11         # sseg_rightmargin: no season chngpts in the last 11 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 11         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 11         # tseg_leftmargin : no trend chngpts in the first 11 datapoints\n","prior.trendRightMargin  = 11         # tseg_rightmargin: no trend chngpts in the last 11 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 52 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 52/1 = 52\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 52         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 9          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 26         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 26         # sseg_leftmargin : no season chngpts in the first 26 datapoints\n","prior.seasonRightMargin = 26         # sseg_rightmargin: no season chngpts in the last 26 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 9          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 26         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 26         # tseg_leftmargin : no trend chngpts in the first 26 datapoints\n","prior.trendRightMargin  = 26         # tseg_rightmargin: no trend chngpts in the last 26 datapoints\n","prior.K_MAX             = 120        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n","ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n","ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 10 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 10/1 = 10\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 10         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 11 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 11/1 = 11\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 11         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 10 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 10/1 = 10\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 10         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 10 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 10/1 = 10\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 10         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 52 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 52/1 = 52\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 52         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 9          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 26         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 26         # sseg_leftmargin : no season chngpts in the first 26 datapoints\n","prior.seasonRightMargin = 26         # sseg_rightmargin: no season chngpts in the last 26 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 9          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 26         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 26         # tseg_leftmargin : no trend chngpts in the first 26 datapoints\n","prior.trendRightMargin  = 26         # tseg_rightmargin: no trend chngpts in the last 26 datapoints\n","prior.K_MAX             = 120        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 11 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 11/1 = 11\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 11         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 18 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 18/1 = 18\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 18         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 9          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 9          # sseg_leftmargin : no season chngpts in the first 9 datapoints\n","prior.seasonRightMargin = 9          # sseg_rightmargin: no season chngpts in the last 9 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 9          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 9          # tseg_leftmargin : no trend chngpts in the first 9 datapoints\n","prior.trendRightMargin  = 9          # tseg_rightmargin: no trend chngpts in the last 9 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 187\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 3 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 3/1 = 3\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 3          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 1          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 1          # sseg_leftmargin : no season chngpts in the first 1 datapoints\n","prior.seasonRightMargin = 1          # sseg_rightmargin: no season chngpts in the last 1 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 11 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 11/1 = 11\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 11         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 17 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 17/1 = 17\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 17         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 8          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 8          # sseg_leftmargin : no season chngpts in the first 8 datapoints\n","prior.seasonRightMargin = 8          # sseg_rightmargin: no season chngpts in the last 8 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 8          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 8          # tseg_leftmargin : no trend chngpts in the first 8 datapoints\n","prior.trendRightMargin  = 8          # tseg_rightmargin: no trend chngpts in the last 8 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 48 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 48/1 = 48\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 48         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 8          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 24         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 24         # sseg_leftmargin : no season chngpts in the first 24 datapoints\n","prior.seasonRightMargin = 24         # sseg_rightmargin: no season chngpts in the last 24 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 8          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 24         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 24         # tseg_leftmargin : no trend chngpts in the first 24 datapoints\n","prior.trendRightMargin  = 24         # tseg_rightmargin: no trend chngpts in the last 24 datapoints\n","prior.K_MAX             = 108        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 44 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 44/1 = 44\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 44         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 9          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 22         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 22         # sseg_leftmargin : no season chngpts in the first 22 datapoints\n","prior.seasonRightMargin = 22         # sseg_rightmargin: no season chngpts in the last 22 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 9          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 22         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 22         # tseg_leftmargin : no trend chngpts in the first 22 datapoints\n","prior.trendRightMargin  = 22         # tseg_rightmargin: no trend chngpts in the last 22 datapoints\n","prior.K_MAX             = 120        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 24 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 24/1 = 24\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 24         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 12         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 12         # sseg_leftmargin : no season chngpts in the first 12 datapoints\n","prior.seasonRightMargin = 12         # sseg_rightmargin: no season chngpts in the last 12 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 12         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 12         # tseg_leftmargin : no trend chngpts in the first 12 datapoints\n","prior.trendRightMargin  = 12         # tseg_rightmargin: no trend chngpts in the last 12 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 236\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n","ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 64 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 64/1 = 64\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 64         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 7          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 32         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 32         # sseg_leftmargin : no season chngpts in the first 32 datapoints\n","prior.seasonRightMargin = 32         # sseg_rightmargin: no season chngpts in the last 32 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 7          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 32         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 32         # tseg_leftmargin : no trend chngpts in the first 32 datapoints\n","prior.trendRightMargin  = 32         # tseg_rightmargin: no trend chngpts in the last 32 datapoints\n","prior.K_MAX             = 96         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n","ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 166\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 166\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 36 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 36/1 = 36\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 36         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 7          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 18         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 18         # sseg_leftmargin : no season chngpts in the first 18 datapoints\n","prior.seasonRightMargin = 18         # sseg_rightmargin: no season chngpts in the last 18 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 7          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 18         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 18         # tseg_leftmargin : no trend chngpts in the first 18 datapoints\n","prior.trendRightMargin  = 18         # tseg_rightmargin: no trend chngpts in the last 18 datapoints\n","prior.K_MAX             = 96         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 45 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 45/1 = 45\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 45         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 22         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 22         # sseg_leftmargin : no season chngpts in the first 22 datapoints\n","prior.seasonRightMargin = 22         # sseg_rightmargin: no season chngpts in the last 22 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 22         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 22         # tseg_leftmargin : no trend chngpts in the first 22 datapoints\n","prior.trendRightMargin  = 22         # tseg_rightmargin: no trend chngpts in the last 22 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 23 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 23/1 = 23\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 23         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 11         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 11         # sseg_leftmargin : no season chngpts in the first 11 datapoints\n","prior.seasonRightMargin = 11         # sseg_rightmargin: no season chngpts in the last 11 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 11         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 11         # tseg_leftmargin : no trend chngpts in the first 11 datapoints\n","prior.trendRightMargin  = 11         # tseg_rightmargin: no trend chngpts in the last 11 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 24 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 24/1 = 24\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 24         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 12         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 12         # sseg_leftmargin : no season chngpts in the first 12 datapoints\n","prior.seasonRightMargin = 12         # sseg_rightmargin: no season chngpts in the last 12 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 12         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 12         # tseg_leftmargin : no trend chngpts in the first 12 datapoints\n","prior.trendRightMargin  = 12         # tseg_rightmargin: no trend chngpts in the last 12 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 257\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 16 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 16/1 = 16\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 16         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 8          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 8          # sseg_leftmargin : no season chngpts in the first 8 datapoints\n","prior.seasonRightMargin = 8          # sseg_rightmargin: no season chngpts in the last 8 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 8          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 8          # tseg_leftmargin : no trend chngpts in the first 8 datapoints\n","prior.trendRightMargin  = 8          # tseg_rightmargin: no trend chngpts in the last 8 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 257\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 16 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 16/1 = 16\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 16         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 8          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 8          # sseg_leftmargin : no season chngpts in the first 8 datapoints\n","prior.seasonRightMargin = 8          # sseg_rightmargin: no season chngpts in the last 8 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 8          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 8          # tseg_leftmargin : no trend chngpts in the first 8 datapoints\n","prior.trendRightMargin  = 8          # tseg_rightmargin: no trend chngpts in the last 8 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 257\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 70 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 70/1 = 70\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 70         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 6          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 35         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 35         # sseg_leftmargin : no season chngpts in the first 35 datapoints\n","prior.seasonRightMargin = 35         # sseg_rightmargin: no season chngpts in the last 35 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 6          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 35         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 35         # tseg_leftmargin : no trend chngpts in the first 35 datapoints\n","prior.trendRightMargin  = 35         # tseg_rightmargin: no trend chngpts in the last 35 datapoints\n","prior.K_MAX             = 84         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 8 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 8/1 = 8\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 8          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 15 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 15/1 = 15\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 15         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 7          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 7          # sseg_leftmargin : no season chngpts in the first 7 datapoints\n","prior.seasonRightMargin = 7          # sseg_rightmargin: no season chngpts in the last 7 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 7          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 7          # tseg_leftmargin : no trend chngpts in the first 7 datapoints\n","prior.trendRightMargin  = 7          # tseg_rightmargin: no trend chngpts in the last 7 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 4 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 4/1 = 4\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 4          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 2          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 2          # sseg_leftmargin : no season chngpts in the first 2 datapoints\n","prior.seasonRightMargin = 2          # sseg_rightmargin: no season chngpts in the last 2 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 5 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 5/1 = 5\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 5          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 2          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 2          # sseg_leftmargin : no season chngpts in the first 2 datapoints\n","prior.seasonRightMargin = 2          # sseg_rightmargin: no season chngpts in the last 2 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 2 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 2/1 = 2\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 2          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 1          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 1          # sseg_leftmargin : no season chngpts in the first 1 datapoints\n","prior.seasonRightMargin = 1          # sseg_rightmargin: no season chngpts in the last 1 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 13 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 13/1 = 13\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 13         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 81 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 81/1 = 81\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 81         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 5          # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 40         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 40         # sseg_leftmargin : no season chngpts in the first 40 datapoints\n","prior.seasonRightMargin = 40         # sseg_rightmargin: no season chngpts in the last 40 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 5          # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 40         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 40         # tseg_leftmargin : no trend chngpts in the first 40 datapoints\n","prior.trendRightMargin  = 40         # tseg_rightmargin: no trend chngpts in the last 40 datapoints\n","prior.K_MAX             = 72         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 10 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 10/1 = 10\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 10         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 252\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 12 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 12/1 = 12\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 12         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 6          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 6          # sseg_leftmargin : no season chngpts in the first 6 datapoints\n","prior.seasonRightMargin = 6          # sseg_rightmargin: no season chngpts in the last 6 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 6          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 6          # tseg_leftmargin : no trend chngpts in the first 6 datapoints\n","prior.trendRightMargin  = 6          # tseg_rightmargin: no trend chngpts in the last 6 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 5 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 5/1 = 5\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 5          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 2          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 2          # sseg_leftmargin : no season chngpts in the first 2 datapoints\n","prior.seasonRightMargin = 2          # sseg_rightmargin: no season chngpts in the last 2 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 8 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 8/1 = 8\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 8          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 40 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 40/1 = 40\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 40         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 20         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 20         # sseg_leftmargin : no season chngpts in the first 20 datapoints\n","prior.seasonRightMargin = 20         # sseg_rightmargin: no season chngpts in the last 20 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 20         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 20         # tseg_leftmargin : no trend chngpts in the first 20 datapoints\n","prior.trendRightMargin  = 20         # tseg_rightmargin: no trend chngpts in the last 20 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 15 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 15/1 = 15\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 15         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 7          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 7          # sseg_leftmargin : no season chngpts in the first 7 datapoints\n","prior.seasonRightMargin = 7          # sseg_rightmargin: no season chngpts in the last 7 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 7          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 7          # tseg_leftmargin : no trend chngpts in the first 7 datapoints\n","prior.trendRightMargin  = 7          # tseg_rightmargin: no trend chngpts in the last 7 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 21 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 21/1 = 21\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 21         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 10         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 10         # sseg_leftmargin : no season chngpts in the first 10 datapoints\n","prior.seasonRightMargin = 10         # sseg_rightmargin: no season chngpts in the last 10 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 10         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 10         # tseg_leftmargin : no trend chngpts in the first 10 datapoints\n","prior.trendRightMargin  = 10         # tseg_rightmargin: no trend chngpts in the last 10 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 24 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 24/1 = 24\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 24         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 12         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 12         # sseg_leftmargin : no season chngpts in the first 12 datapoints\n","prior.seasonRightMargin = 12         # sseg_rightmargin: no season chngpts in the last 12 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 12         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 12         # tseg_leftmargin : no trend chngpts in the first 12 datapoints\n","prior.trendRightMargin  = 12         # tseg_rightmargin: no trend chngpts in the last 12 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 10 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 10/1 = 10\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 10         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 4          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 5          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 5          # sseg_leftmargin : no season chngpts in the first 5 datapoints\n","prior.seasonRightMargin = 5          # sseg_rightmargin: no season chngpts in the last 5 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 5          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 5          # tseg_leftmargin : no trend chngpts in the first 5 datapoints\n","prior.trendRightMargin  = 5          # tseg_rightmargin: no trend chngpts in the last 5 datapoints\n","prior.K_MAX             = 110        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 8 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 8/1 = 8\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 8          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 6 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 6/1 = 6\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 6          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 7 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 7/1 = 7\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 7          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 2          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 3          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 3          # sseg_leftmargin : no season chngpts in the first 3 datapoints\n","prior.seasonRightMargin = 3          # sseg_rightmargin: no season chngpts in the last 3 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 66         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 46 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 46/1 = 46\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 46         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 23         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 23         # sseg_leftmargin : no season chngpts in the first 23 datapoints\n","prior.seasonRightMargin = 23         # sseg_rightmargin: no season chngpts in the last 23 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 23         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 23         # tseg_leftmargin : no trend chngpts in the first 23 datapoints\n","prior.trendRightMargin  = 23         # tseg_rightmargin: no trend chngpts in the last 23 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 272\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 31 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 31/1 = 31\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 31         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 15         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 15         # sseg_leftmargin : no season chngpts in the first 15 datapoints\n","prior.seasonRightMargin = 15         # sseg_rightmargin: no season chngpts in the last 15 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 15         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 15         # tseg_leftmargin : no trend chngpts in the first 15 datapoints\n","prior.trendRightMargin  = 15         # tseg_rightmargin: no trend chngpts in the last 15 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n","ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 44 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 44/1 = 44\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 44         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 22         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 22         # sseg_leftmargin : no season chngpts in the first 22 datapoints\n","prior.seasonRightMargin = 22         # sseg_rightmargin: no season chngpts in the last 22 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 22         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 22         # tseg_leftmargin : no trend chngpts in the first 22 datapoints\n","prior.trendRightMargin  = 22         # tseg_rightmargin: no trend chngpts in the last 22 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n"]},{"output_type":"stream","name":"stderr","text":["ERROR: metadata$season='harmonic' suggests that the time series has a periodic/seasonal component. \"metadata$period\" is needed but missing. BEAST tried to estimate it via an auotcorrelation method but failed to get a reliable estimate. Please specify the period value EXPLICILTY. Or if your input has no periodic/seasonal component at all,  set metadata$season='none' or period=0, which will fit a trend-only model.\n"]},{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 187\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 2 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 2/1 = 2\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 2          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 1          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 1          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 1          # sseg_leftmargin : no season chngpts in the first 1 datapoints\n","prior.seasonRightMargin = 1          # sseg_rightmargin: no season chngpts in the last 1 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 2          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 2          # tseg_leftmargin : no trend chngpts in the first 2 datapoints\n","prior.trendRightMargin  = 2          # tseg_rightmargin: no trend chngpts in the last 2 datapoints\n","prior.K_MAX             = 44         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0          # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 187\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","/Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 187\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","-Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 271\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 31 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 31/1 = 31\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 31         # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 5          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 15         # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 15         # sseg_leftmargin : no season chngpts in the first 15 datapoints\n","prior.seasonRightMargin = 15         # sseg_rightmargin: no season chngpts in the last 15 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 15         # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 15         # tseg_leftmargin : no trend chngpts in the first 15 datapoints\n","prior.trendRightMargin  = 15         # tseg_rightmargin: no trend chngpts in the last 15 datapoints\n","prior.K_MAX             = 132        # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n","\n","Model fitted:  Y =  trend + season + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 179\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","HasSeasonCmpnt: True  | period = 9 (unknown unit). The model 'Y=Trend+Season+Error' is fitted.\n","              : Num_of_DataPoints_per_Period = period/deltaTime = 9/1 = 9\n","HasOutlierCmpt: False | If true, Y=Trend+Season+Outlier+Error fitted instead of Y=Trend+Season+Error\n","Deseasonalize : False | If true, remove a global seasonal  cmpnt before running BEAST & add it back after BEAST\n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'harmonic' # fit a harmonic model to the periodic component\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.period         = 9          # unknown unit [Guessed by autocorrelation]\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.deseasonalize  = False      # if true,remove a global seasonal cmpnt before running BEAST & add it back later\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.seasonMinOrder    = 1          # sorder_minmax[0]: min harmonic order alllowed\n","prior.seasonMaxOrder    = 3          # sorder_minmax[1]: max harmonic order alllowed\n","prior.seasonMinKnotNum  = 0          # scp_minmax[0]   : min num of seasonal chngpts allowed\n","prior.seasonMaxKnotNum  = 10         # scp_minmax[1]   : max num of seasonal chngpts allowed\n","prior.seasonMinSepDist  = 4          # sseg_min        : min seasonal segment length in terms of datapoints\n","prior.seasonLeftMargin  = 4          # sseg_leftmargin : no season chngpts in the first 4 datapoints\n","prior.seasonRightMargin = 4          # sseg_rightmargin: no season chngpts in the last 4 datapoints\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 4          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 4          # tseg_leftmargin : no trend chngpts in the first 4 datapoints\n","prior.trendRightMargin  = 4          # tseg_rightmargin: no trend chngpts in the last 4 datapoints\n","prior.K_MAX             = 88         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'componentwise'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.seasonResamplingOrderProb = 0.17       # Proposal probability of sampling seasoanl order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeSeasonOrder   = True  # if true, dump the estimated time-varying seasonal order: o.season.order \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeSeasonChngpt  = True  # if true, dump the seasoanl changepoints (scp) in the output \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeSeasonAmp     = False #  compute time-varying seasonal mangitude if season=harmonic  \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegSeasonJump= False # differentiate postive/negative jumps at scp\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","|Progress:100.0% done[==============================================================]\n","{'Monthly crude oil refinery inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -272.907 \n"," R2          : 0.61406 \n"," RMSE        : 217.591 \n"," sig2        : 52594.8 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.18333 \n","               ncp_median     : 2 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.78071 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil terminal inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -276.049 \n"," R2          : 0.635168 \n"," RMSE        : 161.859 \n"," sig2        : 31284.3 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.57754 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.29392 \n","               ncp_median     : 4 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil offshore inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -260.404 \n"," R2          : 0.708561 \n"," RMSE        : 83.9057 \n"," sig2        : 8335.37 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.922 \n","               ncp_median     : 5 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.43158 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -175.469 \n"," R2          : 0.916707 \n"," RMSE        : 309.809 \n"," sig2        : 117273 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.83946 \n","               ncp_median     : 6 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.53596 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -214.113 \n"," R2          : 0.892368 \n"," RMSE        : 48.7723 \n"," sig2        : 3278.46 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.65446 \n","               ncp_median     : 6 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.86167 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly kerosene inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -231.701 \n"," R2          : 0.893644 \n"," RMSE        : 66.8667 \n"," sig2        : 7040.28 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.24971 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.01113 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly diesel inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -232.358 \n"," R2          : 0.806167 \n"," RMSE        : 93.9768 \n"," sig2        : 10407 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.93667 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.17733 \n","               ncp_median     : 4 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [129 float32] \n"," data        : [129 float32] \n"," marg_lik    : -112.311 \n"," R2          : 0.951445 \n"," RMSE        : 27.2274 \n"," sig2        : 941.887 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.67579 \n","               ncp_median     : 3 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [129 float32] \n","               order          : [129 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [129 float32] \n","               SD             : [129 float32] \n","               slp            : [129 float32] \n","               slpSD          : [129 float32] \n","               slpSgnPosPr    : [129 float32] \n","               slpSgnZeroPr   : [129 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.64033 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [129 float32] \n","               order          : [129 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [129 float32] \n","               SD             : [129 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly other oil products inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -191.839 \n"," R2          : 0.910759 \n"," RMSE        : 48.0975 \n"," sig2        : 2995.63 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.46879 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 2 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.46267 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly oil products inventories in United Kingdom in kt': None, 'Monthly products net inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -4.88959 \n"," R2          : 0.994767 \n"," RMSE        : 122.968 \n"," sig2        : 20813.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.17888 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [4 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [3 float32] \n","               cpPr           : [3 float32] \n","               cpAbruptChange : [3 float32] \n","               cpCI           : [3x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.27588 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [4 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [3 float32] \n","               cpPr           : [3 float32] \n","               cpAbruptChange : [3 float32] \n","               cpCI           : [3x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly products total domestic inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -239.546 \n"," R2          : 0.794717 \n"," RMSE        : 316.853 \n"," sig2        : 122236 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.92396 \n","               ncp_median     : 5 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.714917 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 2 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly products total inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -87.2619 \n"," R2          : 0.977116 \n"," RMSE        : 337.362 \n"," sig2        : 143902 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.58996 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 2 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.14488 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Korea in kb': Object of 10 field(s):\n","\n"," time        : [153 float32] \n"," data        : [153 float32] \n"," marg_lik    : -138.113 \n"," R2          : 0.94361 \n"," RMSE        : 2835.56 \n"," sig2        : 9.2554e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 1.94013 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [153 float32] \n","               order          : [153 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [153 float32] \n","               SD             : [153 float32] \n","               slp            : [153 float32] \n","               slpSD          : [153 float32] \n","               slpSgnPosPr    : [153 float32] \n","               slpSgnZeroPr   : [153 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.52338 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [153 float32] \n","               order          : [153 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [153 float32] \n","               SD             : [153 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -138.517 \n"," R2          : 0.992347 \n"," RMSE        : 7.35548 \n"," sig2        : 84.5143 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.89463 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.85904 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly liquid inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -91.4539 \n"," R2          : 0.995424 \n"," RMSE        : 9.41382 \n"," sig2        : 138.13 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.92021 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.68988 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -408.091 \n"," R2          : 0.845178 \n"," RMSE        : 6.44332 \n"," sig2        : 53.6347 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.05542 \n","               ncp_median     : 6 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.83254 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly liquid inventories in OECD Europe in mb': None, 'Monthly crude oil inventories in OECD Asia-Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -269.241 \n"," R2          : 0.969096 \n"," RMSE        : 4.22848 \n"," sig2        : 26.0302 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.26817 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.88942 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly liquid inventories in OECD Asia-Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -305.511 \n"," R2          : 0.946441 \n"," RMSE        : 7.09826 \n"," sig2        : 69.6527 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.98625 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.42908 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in India in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -61.4489 \n"," R2          : 0.993682 \n"," RMSE        : 1782.06 \n"," sig2        : 4.04924e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.08983 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.98304 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in China in mb': None, 'Monthly crude oil inventories in Saudi Arabia in kb': None, 'Monthly crude oil inventories in Qatar in kb': None, 'Monthly crude inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -388.264 \n"," R2          : 0.909364 \n"," RMSE        : 1459.06 \n"," sig2        : 2.45675e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.45267 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.78717 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Oman in kb': None, 'Monthly crude inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -240.991 \n"," R2          : 0.981997 \n"," RMSE        : 577.031 \n"," sig2        : 602666 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.67004 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.71942 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -430.67 \n"," R2          : 0.911302 \n"," RMSE        : 1980.24 \n"," sig2        : 6.08182e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.92562 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.36583 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -598.789 \n"," R2          : 0.560941 \n"," RMSE        : 388.09 \n"," sig2        : 175573 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.68404 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.02658 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -264.645 \n"," R2          : 0.98695 \n"," RMSE        : 1868.78 \n"," sig2        : 1.01079e+07 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.89283 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.89554 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -229.418 \n"," R2          : 0.983765 \n"," RMSE        : 1269.81 \n"," sig2        : 2.13376e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.35108 \n","               ncp_median     : 4 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.3975 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 4 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -440.355 \n"," R2          : 0.913312 \n"," RMSE        : 2301.62 \n"," sig2        : 7.34154e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.09471 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.05925 \n","               ncp_median     : 5 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in South Africa in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -464.669 \n"," R2          : 0.861256 \n"," RMSE        : 1474.95 \n"," sig2        : 2.6831e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.39113 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.849208 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 2 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -355.015 \n"," R2          : 0.685491 \n"," RMSE        : 184.675 \n"," sig2        : 40868.1 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.19663 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.50279 \n","               ncp_median     : 4 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -364.648 \n"," R2          : 0.89067 \n"," RMSE        : 5.05784 \n"," sig2        : 31.7179 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.89517 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.003125 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 0 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -358.84 \n"," R2          : 0.946803 \n"," RMSE        : 4.45538 \n"," sig2        : 34.5829 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.66108 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.21017 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -322.214 \n"," R2          : 0.948047 \n"," RMSE        : 1.31914 \n"," sig2        : 2.61408 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.91092 \n","               ncp_median     : 8 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.30475 \n","               ncp_median     : 5 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -253.71 \n"," R2          : 0.97112 \n"," RMSE        : 8.94588 \n"," sig2        : 109.314 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.131 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.256583 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 1 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -329.894 \n"," R2          : 0.945936 \n"," RMSE        : 2.09047 \n"," sig2        : 6.42317 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.25167 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.41867 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -332.653 \n"," R2          : 0.933995 \n"," RMSE        : 6.86883 \n"," sig2        : 62.4473 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.285 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.47004 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -168.299 \n"," R2          : 0.985548 \n"," RMSE        : 1.78773 \n"," sig2        : 4.51271 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.20592 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.72967 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -337.238 \n"," R2          : 0.947475 \n"," RMSE        : 8.04799 \n"," sig2        : 96.6945 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.23038 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.44142 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -501.75 \n"," R2          : 0.583172 \n"," RMSE        : 1.10137 \n"," sig2        : 1.43655 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.39025 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.01458 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -418.904 \n"," R2          : 0.809808 \n"," RMSE        : 2.84106 \n"," sig2        : 9.80229 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.54096 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.14208 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 2 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -398.869 \n"," R2          : 0.864953 \n"," RMSE        : 0.795644 \n"," sig2        : 0.845565 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.46283 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.73654 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -418.868 \n"," R2          : 0.817741 \n"," RMSE        : 4.49772 \n"," sig2        : 24.3595 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.89692 \n","               ncp_median     : 8 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.0421667 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 0 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in India in kb': None, 'Monthly middle distillate inventories in India in kb': None, 'Monthly fuel oil inventories in India in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -147.322 \n"," R2          : 0.987316 \n"," RMSE        : 226.001 \n"," sig2        : 61276.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.96975 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 3 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.74458 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in India in kb': None, 'Monthly gasoline inventories in China in mb': None, 'Monthly gasoil inventories in China in mb': Object of 10 field(s):\n","\n"," time        : [166 float32] \n"," data        : [166 float32] \n"," marg_lik    : -102.629 \n"," R2          : 0.989405 \n"," RMSE        : 2.67939 \n"," sig2        : 12.5355 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.58825 \n","               ncp_median     : 8 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n","               slp            : [166 float32] \n","               slpSD          : [166 float32] \n","               slpSgnPosPr    : [166 float32] \n","               slpSgnZeroPr   : [166 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.38033 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total products inventories in China in mb': Object of 10 field(s):\n","\n"," time        : [166 float32] \n"," data        : [166 float32] \n"," marg_lik    : -31.4508 \n"," R2          : 0.995767 \n"," RMSE        : 4.08039 \n"," sig2        : 28.3743 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.17846 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n","               slp            : [166 float32] \n","               slpSD          : [166 float32] \n","               slpSgnPosPr    : [166 float32] \n","               slpSgnZeroPr   : [166 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.93054 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -191.098 \n"," R2          : 0.990231 \n"," RMSE        : 780.488 \n"," sig2        : 866572 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.63783 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.69025 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -238.311 \n"," R2          : 0.986254 \n"," RMSE        : 880.058 \n"," sig2        : 1.25598e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.98404 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.62913 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -486.587 \n"," R2          : 0.899674 \n"," RMSE        : 693.488 \n"," sig2        : 737948 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.53158 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.0555 \n","               ncp_median     : 6 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -163.75 \n"," R2          : 0.993134 \n"," RMSE        : 1612.84 \n"," sig2        : 4.11252e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.2265 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.97188 \n","               ncp_median     : 7 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Qatar in kb': Object of 10 field(s):\n","\n"," time        : [257 float32] \n"," data        : [257 float32] \n"," marg_lik    : -90.2318 \n"," R2          : 0.998793 \n"," RMSE        : 26.6077 \n"," sig2        : 2286.54 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.04896 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n","               slp            : [257 float32] \n","               slpSD          : [257 float32] \n","               slpSgnPosPr    : [257 float32] \n","               slpSgnZeroPr   : [257 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.71875 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Qatar in kb': Object of 10 field(s):\n","\n"," time        : [257 float32] \n"," data        : [257 float32] \n"," marg_lik    : -26.812 \n"," R2          : 0.999035 \n"," RMSE        : 55.936 \n"," sig2        : 8618.87 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.57229 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n","               slp            : [257 float32] \n","               slpSD          : [257 float32] \n","               slpSgnPosPr    : [257 float32] \n","               slpSgnZeroPr   : [257 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.51892 \n","               ncp_median     : 8 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Qatar in kb': Object of 10 field(s):\n","\n"," time        : [257 float32] \n"," data        : [257 float32] \n"," marg_lik    : 15.0487 \n"," R2          : 0.996824 \n"," RMSE        : 34.6031 \n"," sig2        : 1529.46 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.00954 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 3 \n","               ncpPr          : [7 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [6 float32] \n","               cpPr           : [6 float32] \n","               cpAbruptChange : [6 float32] \n","               cpCI           : [6x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n","               slp            : [257 float32] \n","               slpSD          : [257 float32] \n","               slpSgnPosPr    : [257 float32] \n","               slpSgnZeroPr   : [257 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.39046 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [7 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [6 float32] \n","               cpPr           : [6 float32] \n","               cpAbruptChange : [6 float32] \n","               cpCI           : [6x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Qatar in kb': None, 'Monthly gasoline inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -345.603 \n"," R2          : 0.973339 \n"," RMSE        : 146.471 \n"," sig2        : 39579.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.97842 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.65821 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -342.629 \n"," R2          : 0.983636 \n"," RMSE        : 125.398 \n"," sig2        : 32866 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.94442 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.76858 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -430.323 \n"," R2          : 0.913975 \n"," RMSE        : 158.064 \n"," sig2        : 35427 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.62242 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.27379 \n","               ncp_median     : 7 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -254.056 \n"," R2          : 0.985367 \n"," RMSE        : 426.296 \n"," sig2        : 316981 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.86259 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.04813 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Oman in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -49.9487 \n"," R2          : 0.99926 \n"," RMSE        : 12.2622 \n"," sig2        : 725.445 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.70913 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.67742 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Oman in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -298.5 \n"," R2          : 0.970856 \n"," RMSE        : 44.7484 \n"," sig2        : 3140.63 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.53563 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.39492 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Oman in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -376.677 \n"," R2          : 0.938848 \n"," RMSE        : 22.2451 \n"," sig2        : 668.866 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.27483 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.03792 \n","               ncp_median     : 6 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Oman in kb': None, 'Monthly gasoline inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -285.43 \n"," R2          : 0.957327 \n"," RMSE        : 234.275 \n"," sig2        : 76668.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.26263 \n","               ncp_median     : 7 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.2245 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -202.844 \n"," R2          : 0.980247 \n"," RMSE        : 349.063 \n"," sig2        : 194841 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.25583 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.36367 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -364.082 \n"," R2          : 0.950294 \n"," RMSE        : 136.163 \n"," sig2        : 29330.8 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.95542 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.26654 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -207.464 \n"," R2          : 0.982882 \n"," RMSE        : 1940.64 \n"," sig2        : 4.95049e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.64092 \n","               ncp_median     : 3 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [6 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [5 float32] \n","               cpPr           : [5 float32] \n","               cpAbruptChange : [5 float32] \n","               cpCI           : [5x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.81917 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [6 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [5 float32] \n","               cpPr           : [5 float32] \n","               cpAbruptChange : [5 float32] \n","               cpCI           : [5x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -350.634 \n"," R2          : 0.961824 \n"," RMSE        : 571.808 \n"," sig2        : 529711 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.82742 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.01658 \n","               ncp_median     : 7 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -380.723 \n"," R2          : 0.939934 \n"," RMSE        : 788.499 \n"," sig2        : 998456 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.64988 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.03792 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -359.085 \n"," R2          : 0.961182 \n"," RMSE        : 486.703 \n"," sig2        : 405657 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.6995 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.45917 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -353.414 \n"," R2          : 0.942737 \n"," RMSE        : 1846.89 \n"," sig2        : 4.63913e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.68754 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.95871 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -567.315 \n"," R2          : 0.736351 \n"," RMSE        : 159.332 \n"," sig2        : 33279.6 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.74775 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.35371 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -558.155 \n"," R2          : 0.742218 \n"," RMSE        : 238.601 \n"," sig2        : 72885.1 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.90946 \n","               ncp_median     : 7 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.195 \n","               ncp_median     : 6 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -484.818 \n"," R2          : 0.813529 \n"," RMSE        : 104.776 \n"," sig2        : 12980.6 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.13033 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.77133 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -453.953 \n"," R2          : 0.861427 \n"," RMSE        : 458.672 \n"," sig2        : 243364 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.61196 \n","               ncp_median     : 7 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.13038 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 1 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -284.422 \n"," R2          : 0.977978 \n"," RMSE        : 340.215 \n"," sig2        : 171112 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.88842 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.75921 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -350.457 \n"," R2          : 0.977095 \n"," RMSE        : 534.73 \n"," sig2        : 672323 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.60188 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.31325 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -332.223 \n"," R2          : 0.98452 \n"," RMSE        : 1083.82 \n"," sig2        : 2.9836e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.30817 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.69875 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -355.148 \n"," R2          : 0.971342 \n"," RMSE        : 5134 \n"," sig2        : 4.2861e+07 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.22871 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.17754 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -468.941 \n"," R2          : 0.898824 \n"," RMSE        : 198.364 \n"," sig2        : 61344.6 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.73154 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.65354 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -508.692 \n"," R2          : 0.785183 \n"," RMSE        : 558.788 \n"," sig2        : 378872 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.75067 \n","               ncp_median     : 8 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.14979 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -557.134 \n"," R2          : 0.633914 \n"," RMSE        : 426.614 \n"," sig2        : 198635 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.59254 \n","               ncp_median     : 5 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.81667 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -464.305 \n"," R2          : 0.825656 \n"," RMSE        : 1367.06 \n"," sig2        : 2.07619e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.42346 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.09871 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -231.654 \n"," R2          : 0.990887 \n"," RMSE        : 609.418 \n"," sig2        : 680622 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.98283 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.57288 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -370.571 \n"," R2          : 0.944906 \n"," RMSE        : 286.241 \n"," sig2        : 103175 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.31792 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.23842 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Nigeria in kb': None, 'Monthly total product inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -184.006 \n"," R2          : 0.991159 \n"," RMSE        : 1018.89 \n"," sig2        : 1.55015e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.59292 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.75192 \n","               ncp_median     : 7 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in South Africa in kb': None, 'Monthly middle distillate inventories in South Africa in kb': None, 'Monthly fuel oil inventories in South Africa in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -348.582 \n"," R2          : 0.956969 \n"," RMSE        : 225.663 \n"," sig2        : 66790.7 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.86775 \n","               ncp_median     : 3 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.24513 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in South Africa in kb': None, 'Monthly gasoline inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -334.661 \n"," R2          : 0.796871 \n"," RMSE        : 142.298 \n"," sig2        : 27437.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.52333 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.20296 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -304.009 \n"," R2          : 0.807793 \n"," RMSE        : 370.486 \n"," sig2        : 159344 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.27163 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.17238 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -327.59 \n"," R2          : 0.770869 \n"," RMSE        : 141.523 \n"," sig2        : 24665.4 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.04871 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.54563 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -232.512 \n"," R2          : 0.990397 \n"," RMSE        : 248.379 \n"," sig2        : 102076 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.3395 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.14967 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly kerosene stock level in China in mb': Object of 10 field(s):\n","\n"," time        : [179 float32] \n"," data        : [179 float32] \n"," marg_lik    : -35.1035 \n"," R2          : 0.9965 \n"," RMSE        : 0.296164 \n"," sig2        : 0.176533 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.64008 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [179 float32] \n","               order          : [179 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [179 float32] \n","               SD             : [179 float32] \n","               slp            : [179 float32] \n","               slpSD          : [179 float32] \n","               slpSgnPosPr    : [179 float32] \n","               slpSgnZeroPr   : [179 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.24392 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [179 float32] \n","               order          : [179 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [179 float32] \n","               SD             : [179 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n","}\n"]}]},{"cell_type":"code","source":["\n","print(beast_dict)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1732184774102,"user_tz":360,"elapsed":551,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bca704f2-7547-40b2-b894-99760310a7fc","id":"Uv3rCGnHIPTl"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Monthly crude oil refinery inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -272.907 \n"," R2          : 0.61406 \n"," RMSE        : 217.591 \n"," sig2        : 52594.8 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.18333 \n","               ncp_median     : 2 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.78071 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil terminal inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -276.049 \n"," R2          : 0.635168 \n"," RMSE        : 161.859 \n"," sig2        : 31284.3 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.57754 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.29392 \n","               ncp_median     : 4 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil offshore inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -260.404 \n"," R2          : 0.708561 \n"," RMSE        : 83.9057 \n"," sig2        : 8335.37 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.922 \n","               ncp_median     : 5 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.43158 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -175.469 \n"," R2          : 0.916707 \n"," RMSE        : 309.809 \n"," sig2        : 117273 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.83946 \n","               ncp_median     : 6 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.53596 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -214.113 \n"," R2          : 0.892368 \n"," RMSE        : 48.7723 \n"," sig2        : 3278.46 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.65446 \n","               ncp_median     : 6 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.86167 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly kerosene inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -231.701 \n"," R2          : 0.893644 \n"," RMSE        : 66.8667 \n"," sig2        : 7040.28 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.24971 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.01113 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly diesel inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -232.358 \n"," R2          : 0.806167 \n"," RMSE        : 93.9768 \n"," sig2        : 10407 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.93667 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.17733 \n","               ncp_median     : 4 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [129 float32] \n"," data        : [129 float32] \n"," marg_lik    : -112.311 \n"," R2          : 0.951445 \n"," RMSE        : 27.2274 \n"," sig2        : 941.887 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.67579 \n","               ncp_median     : 3 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [129 float32] \n","               order          : [129 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [129 float32] \n","               SD             : [129 float32] \n","               slp            : [129 float32] \n","               slpSD          : [129 float32] \n","               slpSgnPosPr    : [129 float32] \n","               slpSgnZeroPr   : [129 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.64033 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [129 float32] \n","               order          : [129 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [129 float32] \n","               SD             : [129 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly other oil products inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -191.839 \n"," R2          : 0.910759 \n"," RMSE        : 48.0975 \n"," sig2        : 2995.63 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.46879 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 2 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.46267 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly oil products inventories in United Kingdom in kt': None, 'Monthly products net inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -4.88959 \n"," R2          : 0.994767 \n"," RMSE        : 122.968 \n"," sig2        : 20813.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.17888 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [4 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [3 float32] \n","               cpPr           : [3 float32] \n","               cpAbruptChange : [3 float32] \n","               cpCI           : [3x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.27588 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [4 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [3 float32] \n","               cpPr           : [3 float32] \n","               cpAbruptChange : [3 float32] \n","               cpCI           : [3x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly products total domestic inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -239.546 \n"," R2          : 0.794717 \n"," RMSE        : 316.853 \n"," sig2        : 122236 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.92396 \n","               ncp_median     : 5 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.714917 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 2 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly products total inventories in United Kingdom in kt': Object of 10 field(s):\n","\n"," time        : [151 float32] \n"," data        : [151 float32] \n"," marg_lik    : -87.2619 \n"," R2          : 0.977116 \n"," RMSE        : 337.362 \n"," sig2        : 143902 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.58996 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 2 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n","               slp            : [151 float32] \n","               slpSD          : [151 float32] \n","               slpSgnPosPr    : [151 float32] \n","               slpSgnZeroPr   : [151 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.14488 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [151 float32] \n","               order          : [151 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [151 float32] \n","               SD             : [151 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Korea in kb': Object of 10 field(s):\n","\n"," time        : [153 float32] \n"," data        : [153 float32] \n"," marg_lik    : -138.113 \n"," R2          : 0.94361 \n"," RMSE        : 2835.56 \n"," sig2        : 9.2554e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 1.94013 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [153 float32] \n","               order          : [153 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [153 float32] \n","               SD             : [153 float32] \n","               slp            : [153 float32] \n","               slpSD          : [153 float32] \n","               slpSgnPosPr    : [153 float32] \n","               slpSgnZeroPr   : [153 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.52338 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [153 float32] \n","               order          : [153 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [153 float32] \n","               SD             : [153 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -138.517 \n"," R2          : 0.992347 \n"," RMSE        : 7.35548 \n"," sig2        : 84.5143 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.89463 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.85904 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly liquid inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -91.4539 \n"," R2          : 0.995424 \n"," RMSE        : 9.41382 \n"," sig2        : 138.13 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.92021 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.68988 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -408.091 \n"," R2          : 0.845178 \n"," RMSE        : 6.44332 \n"," sig2        : 53.6347 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.05542 \n","               ncp_median     : 6 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.83254 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly liquid inventories in OECD Europe in mb': None, 'Monthly crude oil inventories in OECD Asia-Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -269.241 \n"," R2          : 0.969096 \n"," RMSE        : 4.22848 \n"," sig2        : 26.0302 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.26817 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.88942 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly liquid inventories in OECD Asia-Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -305.511 \n"," R2          : 0.946441 \n"," RMSE        : 7.09826 \n"," sig2        : 69.6527 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.98625 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.42908 \n","               ncp_median     : 3 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in India in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -61.4489 \n"," R2          : 0.993682 \n"," RMSE        : 1782.06 \n"," sig2        : 4.04924e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.08983 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.98304 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in China in mb': None, 'Monthly crude oil inventories in Saudi Arabia in kb': None, 'Monthly crude oil inventories in Qatar in kb': None, 'Monthly crude inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -388.264 \n"," R2          : 0.909364 \n"," RMSE        : 1459.06 \n"," sig2        : 2.45675e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.45267 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.78717 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Oman in kb': None, 'Monthly crude inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -240.991 \n"," R2          : 0.981997 \n"," RMSE        : 577.031 \n"," sig2        : 602666 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.67004 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.71942 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -430.67 \n"," R2          : 0.911302 \n"," RMSE        : 1980.24 \n"," sig2        : 6.08182e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.92562 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.36583 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -598.789 \n"," R2          : 0.560941 \n"," RMSE        : 388.09 \n"," sig2        : 175573 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.68404 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.02658 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -264.645 \n"," R2          : 0.98695 \n"," RMSE        : 1868.78 \n"," sig2        : 1.01079e+07 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.89283 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.89554 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -229.418 \n"," R2          : 0.983765 \n"," RMSE        : 1269.81 \n"," sig2        : 2.13376e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.35108 \n","               ncp_median     : 4 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.3975 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 4 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -440.355 \n"," R2          : 0.913312 \n"," RMSE        : 2301.62 \n"," sig2        : 7.34154e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.09471 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.05925 \n","               ncp_median     : 5 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in South Africa in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -464.669 \n"," R2          : 0.861256 \n"," RMSE        : 1474.95 \n"," sig2        : 2.6831e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.39113 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.849208 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 2 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly crude oil inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -355.015 \n"," R2          : 0.685491 \n"," RMSE        : 184.675 \n"," sig2        : 40868.1 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.19663 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.50279 \n","               ncp_median     : 4 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -364.648 \n"," R2          : 0.89067 \n"," RMSE        : 5.05784 \n"," sig2        : 31.7179 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.89517 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.003125 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 0 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -358.84 \n"," R2          : 0.946803 \n"," RMSE        : 4.45538 \n"," sig2        : 34.5829 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.66108 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.21017 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -322.214 \n"," R2          : 0.948047 \n"," RMSE        : 1.31914 \n"," sig2        : 2.61408 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.91092 \n","               ncp_median     : 8 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.30475 \n","               ncp_median     : 5 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in North America in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -253.71 \n"," R2          : 0.97112 \n"," RMSE        : 8.94588 \n"," sig2        : 109.314 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.131 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.256583 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 1 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -329.894 \n"," R2          : 0.945936 \n"," RMSE        : 2.09047 \n"," sig2        : 6.42317 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.25167 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.41867 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -332.653 \n"," R2          : 0.933995 \n"," RMSE        : 6.86883 \n"," sig2        : 62.4473 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.285 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.47004 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [9 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [8 float32] \n","               cpPr           : [8 float32] \n","               cpAbruptChange : [8 float32] \n","               cpCI           : [8x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -168.299 \n"," R2          : 0.985548 \n"," RMSE        : 1.78773 \n"," sig2        : 4.51271 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.20592 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.72967 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [10 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [9 float32] \n","               cpPr           : [9 float32] \n","               cpAbruptChange : [9 float32] \n","               cpCI           : [9x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in OECD Europe in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -337.238 \n"," R2          : 0.947475 \n"," RMSE        : 8.04799 \n"," sig2        : 96.6945 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.23038 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.44142 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -501.75 \n"," R2          : 0.583172 \n"," RMSE        : 1.10137 \n"," sig2        : 1.43655 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.39025 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.01458 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -418.904 \n"," R2          : 0.809808 \n"," RMSE        : 2.84106 \n"," sig2        : 9.80229 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.54096 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.14208 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 2 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -398.869 \n"," R2          : 0.864953 \n"," RMSE        : 0.795644 \n"," sig2        : 0.845565 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.46283 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.73654 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in OECD Asia Pacific in mb': Object of 10 field(s):\n","\n"," time        : [236 float32] \n"," data        : [236 float32] \n"," marg_lik    : -418.868 \n"," R2          : 0.817741 \n"," RMSE        : 4.49772 \n"," sig2        : 24.3595 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.89692 \n","               ncp_median     : 8 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n","               slp            : [236 float32] \n","               slpSD          : [236 float32] \n","               slpSgnPosPr    : [236 float32] \n","               slpSgnZeroPr   : [236 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 0.0421667 \n","               ncp_median     : 0 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 0 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [236 float32] \n","               order          : [236 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [236 float32] \n","               SD             : [236 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in India in kb': None, 'Monthly middle distillate inventories in India in kb': None, 'Monthly fuel oil inventories in India in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -147.322 \n"," R2          : 0.987316 \n"," RMSE        : 226.001 \n"," sig2        : 61276.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.96975 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 3 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.74458 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in India in kb': None, 'Monthly gasoline inventories in China in mb': None, 'Monthly gasoil inventories in China in mb': Object of 10 field(s):\n","\n"," time        : [166 float32] \n"," data        : [166 float32] \n"," marg_lik    : -102.629 \n"," R2          : 0.989405 \n"," RMSE        : 2.67939 \n"," sig2        : 12.5355 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.58825 \n","               ncp_median     : 8 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n","               slp            : [166 float32] \n","               slpSD          : [166 float32] \n","               slpSgnPosPr    : [166 float32] \n","               slpSgnZeroPr   : [166 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.38033 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total products inventories in China in mb': Object of 10 field(s):\n","\n"," time        : [166 float32] \n"," data        : [166 float32] \n"," marg_lik    : -31.4508 \n"," R2          : 0.995767 \n"," RMSE        : 4.08039 \n"," sig2        : 28.3743 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.17846 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 2 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n","               slp            : [166 float32] \n","               slpSD          : [166 float32] \n","               slpSgnPosPr    : [166 float32] \n","               slpSgnZeroPr   : [166 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.93054 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [8 float32] \n","               cpOccPr        : [166 float32] \n","               order          : [166 float32] \n","               cp             : [7 float32] \n","               cpPr           : [7 float32] \n","               cpAbruptChange : [7 float32] \n","               cpCI           : [7x2 float32] \n","               Y              : [166 float32] \n","               SD             : [166 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -191.098 \n"," R2          : 0.990231 \n"," RMSE        : 780.488 \n"," sig2        : 866572 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.63783 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.69025 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -238.311 \n"," R2          : 0.986254 \n"," RMSE        : 880.058 \n"," sig2        : 1.25598e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.98404 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.62913 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -486.587 \n"," R2          : 0.899674 \n"," RMSE        : 693.488 \n"," sig2        : 737948 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.53158 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.0555 \n","               ncp_median     : 6 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Saudi Arabia in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -163.75 \n"," R2          : 0.993134 \n"," RMSE        : 1612.84 \n"," sig2        : 4.11252e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.2265 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.97188 \n","               ncp_median     : 7 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Qatar in kb': Object of 10 field(s):\n","\n"," time        : [257 float32] \n"," data        : [257 float32] \n"," marg_lik    : -90.2318 \n"," R2          : 0.998793 \n"," RMSE        : 26.6077 \n"," sig2        : 2286.54 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.04896 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n","               slp            : [257 float32] \n","               slpSD          : [257 float32] \n","               slpSgnPosPr    : [257 float32] \n","               slpSgnZeroPr   : [257 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.71875 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Qatar in kb': Object of 10 field(s):\n","\n"," time        : [257 float32] \n"," data        : [257 float32] \n"," marg_lik    : -26.812 \n"," R2          : 0.999035 \n"," RMSE        : 55.936 \n"," sig2        : 8618.87 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.57229 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n","               slp            : [257 float32] \n","               slpSD          : [257 float32] \n","               slpSgnPosPr    : [257 float32] \n","               slpSgnZeroPr   : [257 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.51892 \n","               ncp_median     : 8 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Qatar in kb': Object of 10 field(s):\n","\n"," time        : [257 float32] \n"," data        : [257 float32] \n"," marg_lik    : 15.0487 \n"," R2          : 0.996824 \n"," RMSE        : 34.6031 \n"," sig2        : 1529.46 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 3.00954 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 3 \n","               ncpPr          : [7 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [6 float32] \n","               cpPr           : [6 float32] \n","               cpAbruptChange : [6 float32] \n","               cpCI           : [6x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n","               slp            : [257 float32] \n","               slpSD          : [257 float32] \n","               slpSgnPosPr    : [257 float32] \n","               slpSgnZeroPr   : [257 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.39046 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 3 \n","               ncpPr          : [7 float32] \n","               cpOccPr        : [257 float32] \n","               order          : [257 float32] \n","               cp             : [6 float32] \n","               cpPr           : [6 float32] \n","               cpAbruptChange : [6 float32] \n","               cpCI           : [6x2 float32] \n","               Y              : [257 float32] \n","               SD             : [257 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Qatar in kb': None, 'Monthly gasoline inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -345.603 \n"," R2          : 0.973339 \n"," RMSE        : 146.471 \n"," sig2        : 39579.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.97842 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.65821 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -342.629 \n"," R2          : 0.983636 \n"," RMSE        : 125.398 \n"," sig2        : 32866 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.94442 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.76858 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -430.323 \n"," R2          : 0.913975 \n"," RMSE        : 158.064 \n"," sig2        : 35427 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.62242 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.27379 \n","               ncp_median     : 7 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Iraq in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -254.056 \n"," R2          : 0.985367 \n"," RMSE        : 426.296 \n"," sig2        : 316981 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.86259 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.04813 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Oman in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -49.9487 \n"," R2          : 0.99926 \n"," RMSE        : 12.2622 \n"," sig2        : 725.445 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.70913 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.67742 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Oman in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -298.5 \n"," R2          : 0.970856 \n"," RMSE        : 44.7484 \n"," sig2        : 3140.63 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.53563 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.39492 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Oman in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -376.677 \n"," R2          : 0.938848 \n"," RMSE        : 22.2451 \n"," sig2        : 668.866 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.27483 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.03792 \n","               ncp_median     : 6 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Oman in kb': None, 'Monthly gasoline inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -285.43 \n"," R2          : 0.957327 \n"," RMSE        : 234.275 \n"," sig2        : 76668.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.26263 \n","               ncp_median     : 7 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.2245 \n","               ncp_median     : 2 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -202.844 \n"," R2          : 0.980247 \n"," RMSE        : 349.063 \n"," sig2        : 194841 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.25583 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.36367 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -364.082 \n"," R2          : 0.950294 \n"," RMSE        : 136.163 \n"," sig2        : 29330.8 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.95542 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.26654 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Argentina in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -207.464 \n"," R2          : 0.982882 \n"," RMSE        : 1940.64 \n"," sig2        : 4.95049e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.64092 \n","               ncp_median     : 3 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [6 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [5 float32] \n","               cpPr           : [5 float32] \n","               cpAbruptChange : [5 float32] \n","               cpCI           : [5x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 2.81917 \n","               ncp_median     : 3 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [6 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [5 float32] \n","               cpPr           : [5 float32] \n","               cpAbruptChange : [5 float32] \n","               cpCI           : [5x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -350.634 \n"," R2          : 0.961824 \n"," RMSE        : 571.808 \n"," sig2        : 529711 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.82742 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.01658 \n","               ncp_median     : 7 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -380.723 \n"," R2          : 0.939934 \n"," RMSE        : 788.499 \n"," sig2        : 998456 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.64988 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.03792 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -359.085 \n"," R2          : 0.961182 \n"," RMSE        : 486.703 \n"," sig2        : 405657 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.6995 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.45917 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Brazil in kb': Object of 10 field(s):\n","\n"," time        : [252 float32] \n"," data        : [252 float32] \n"," marg_lik    : -353.414 \n"," R2          : 0.942737 \n"," RMSE        : 1846.89 \n"," sig2        : 4.63913e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.68754 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n","               slp            : [252 float32] \n","               slpSD          : [252 float32] \n","               slpSgnPosPr    : [252 float32] \n","               slpSgnZeroPr   : [252 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.95871 \n","               ncp_median     : 4 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [252 float32] \n","               order          : [252 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [252 float32] \n","               SD             : [252 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -567.315 \n"," R2          : 0.736351 \n"," RMSE        : 159.332 \n"," sig2        : 33279.6 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.74775 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 9 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.35371 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -558.155 \n"," R2          : 0.742218 \n"," RMSE        : 238.601 \n"," sig2        : 72885.1 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.90946 \n","               ncp_median     : 7 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.195 \n","               ncp_median     : 6 \n","               ncp_mode       : 3 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -484.818 \n"," R2          : 0.813529 \n"," RMSE        : 104.776 \n"," sig2        : 12980.6 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.13033 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.77133 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Chile in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -453.953 \n"," R2          : 0.861427 \n"," RMSE        : 458.672 \n"," sig2        : 243364 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.61196 \n","               ncp_median     : 7 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.13038 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 1 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -284.422 \n"," R2          : 0.977978 \n"," RMSE        : 340.215 \n"," sig2        : 171112 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.88842 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.75921 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -350.457 \n"," R2          : 0.977095 \n"," RMSE        : 534.73 \n"," sig2        : 672323 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.60188 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.31325 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -332.223 \n"," R2          : 0.98452 \n"," RMSE        : 1083.82 \n"," sig2        : 2.9836e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.30817 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.69875 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Venezuela in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -355.148 \n"," R2          : 0.971342 \n"," RMSE        : 5134 \n"," sig2        : 4.2861e+07 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.22871 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.17754 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -468.941 \n"," R2          : 0.898824 \n"," RMSE        : 198.364 \n"," sig2        : 61344.6 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.73154 \n","               ncp_median     : 9 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 7 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.65354 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -508.692 \n"," R2          : 0.785183 \n"," RMSE        : 558.788 \n"," sig2        : 378872 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.75067 \n","               ncp_median     : 8 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 3.14979 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -557.134 \n"," R2          : 0.633914 \n"," RMSE        : 426.614 \n"," sig2        : 198635 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.59254 \n","               ncp_median     : 5 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 3 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.81667 \n","               ncp_median     : 1 \n","               ncp_mode       : 1 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Algeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -464.305 \n"," R2          : 0.825656 \n"," RMSE        : 1367.06 \n"," sig2        : 2.07619e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.42346 \n","               ncp_median     : 8 \n","               ncp_mode       : 8 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.09871 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -231.654 \n"," R2          : 0.990887 \n"," RMSE        : 609.418 \n"," sig2        : 680622 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 9.98283 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 10 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 8.57288 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -370.571 \n"," R2          : 0.944906 \n"," RMSE        : 286.241 \n"," sig2        : 103175 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 4.31792 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 4.23842 \n","               ncp_median     : 4 \n","               ncp_mode       : 4 \n","               ncp_pct90      : 5 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Nigeria in kb': None, 'Monthly total product inventories in Nigeria in kb': Object of 10 field(s):\n","\n"," time        : [272 float32] \n"," data        : [272 float32] \n"," marg_lik    : -184.006 \n"," R2          : 0.991159 \n"," RMSE        : 1018.89 \n"," sig2        : 1.55015e+06 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.59292 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n","               slp            : [272 float32] \n","               slpSD          : [272 float32] \n","               slpSgnPosPr    : [272 float32] \n","               slpSgnZeroPr   : [272 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.75192 \n","               ncp_median     : 7 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [272 float32] \n","               order          : [272 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [272 float32] \n","               SD             : [272 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly gasoline inventories in South Africa in kb': None, 'Monthly middle distillate inventories in South Africa in kb': None, 'Monthly fuel oil inventories in South Africa in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -348.582 \n"," R2          : 0.956969 \n"," RMSE        : 225.663 \n"," sig2        : 66790.7 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 2.86775 \n","               ncp_median     : 3 \n","               ncp_mode       : 2 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 2 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 6.24513 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 7 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in South Africa in kb': None, 'Monthly gasoline inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -334.661 \n"," R2          : 0.796871 \n"," RMSE        : 142.298 \n"," sig2        : 27437.9 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.52333 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 5.20296 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 1 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly middle distillate inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -304.009 \n"," R2          : 0.807793 \n"," RMSE        : 370.486 \n"," sig2        : 159344 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 7.27163 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 9 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.17238 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 3 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly fuel oil inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [187 float32] \n"," data        : [187 float32] \n"," marg_lik    : -327.59 \n"," R2          : 0.770869 \n"," RMSE        : 141.523 \n"," sig2        : 24665.4 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 6.04871 \n","               ncp_median     : 6 \n","               ncp_mode       : 6 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 4 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n","               slp            : [187 float32] \n","               slpSD          : [187 float32] \n","               slpSgnPosPr    : [187 float32] \n","               slpSgnZeroPr   : [187 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 1.54563 \n","               ncp_median     : 1 \n","               ncp_mode       : 0 \n","               ncp_pct90      : 4 \n","               ncp_pct10      : 0 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [187 float32] \n","               order          : [187 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [187 float32] \n","               SD             : [187 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly total product inventories in Tunisia in kb': Object of 10 field(s):\n","\n"," time        : [271 float32] \n"," data        : [271 float32] \n"," marg_lik    : -232.512 \n"," R2          : 0.990397 \n"," RMSE        : 248.379 \n"," sig2        : 102076 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 5.3395 \n","               ncp_median     : 5 \n","               ncp_mode       : 5 \n","               ncp_pct90      : 6 \n","               ncp_pct10      : 5 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n","               slp            : [271 float32] \n","               slpSD          : [271 float32] \n","               slpSgnPosPr    : [271 float32] \n","               slpSgnZeroPr   : [271 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 7.14967 \n","               ncp_median     : 7 \n","               ncp_mode       : 7 \n","               ncp_pct90      : 8 \n","               ncp_pct10      : 6 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [271 float32] \n","               order          : [271 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [271 float32] \n","               SD             : [271 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n",", 'Monthly kerosene stock level in China in mb': Object of 10 field(s):\n","\n"," time        : [179 float32] \n"," data        : [179 float32] \n"," marg_lik    : -35.1035 \n"," R2          : 0.9965 \n"," RMSE        : 0.296164 \n"," sig2        : 0.176533 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.64008 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [179 float32] \n","               order          : [179 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [179 float32] \n","               SD             : [179 float32] \n","               slp            : [179 float32] \n","               slpSD          : [179 float32] \n","               slpSgnPosPr    : [179 float32] \n","               slpSgnZeroPr   : [179 float32] \n"," season      : [ 1 object with 14 fields] \n","               ncp            : 9.24392 \n","               ncp_median     : 10 \n","               ncp_mode       : 10 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [179 float32] \n","               order          : [179 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [179 float32] \n","               SD             : [179 float32] \n"," class       : 'beast'\n"," season_type : 'harmonic'\n","}\n"]}]},{"cell_type":"code","source":[],"metadata":{"executionInfo":{"status":"ok","timestamp":1732182552576,"user_tz":360,"elapsed":43462,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8767d32d-6dd0-4f11-9f6c-d11e2ddbdd9b","id":"3fxp0URZIK27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Monthly kerosene stock level in China in mb\n","           Date  Monthly kerosene stock level in China in mb\n","0    2009-12-01                                    10.963023\n","1    2010-01-01                                    11.171567\n","2    2010-02-01                                    12.276513\n","3    2010-03-01                                    11.933628\n","4    2010-04-01                                    11.590660\n","..          ...                                          ...\n","174  2024-06-01                                    23.045676\n","175  2024-07-01                                    23.276133\n","176  2024-08-01                                    23.043372\n","177  2024-09-01                                    22.812938\n","178  2024-10-01                                    23.041068\n","\n","[179 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["change_detection = rb.beast( df['Monthly middle distillate inventories in OECD Europe in mb'], season='none')\n","\n","rb.plot(change_detection)\n","\n","#print(change_detection[\"trend\"])\n","#graph_namelist = df.columns.tolist()\n","#print(graph_namelist)"],"metadata":{"id":"WveMEAtbx8vQ","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1732121531515,"user_tz":360,"elapsed":2428,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"outputId":"7eeb150c-8329-4fb8-f3a4-f666de148986","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Model fitted:  Y =  trend + error \n","\n","INFO: To supress messages, set print_param/print_warning/print_progresss = 0 in beast() and beast_irreg()\n","INFO: To supress messages, Set extra.printParameter/printWarning/printProgress = 0 in beast123()\n","INFO: To supress all messaages, set quiet=1 in beast() and beast_irreg() or extra.quiet=1 in beast123()\n","\n","#--------------------------------------------------#\n","#       Brief summary of Input Data                #\n","#--------------------------------------------------#\n","Data Dimension: One signal of length 312\n","IsOrdered     : Yes, ordered in time\n","IsRegular     : Yes, evenly spaced at interval of  1 (unknown unit)\n","hasSeasonCmpnt: False | no periodic or seasonal component. The model Y=Trend+Error is fitted.\n","HasOutlierCmpt: False | If true, Y=Trend+Outlier+Error (experimental) is fitted instead of Y=Trend+Error \n","Detrend       : False | If true, remove a global trend component before running BEAST & add it back after BEAST\n","MissingValue  : NaN  flagged as missing values \n","MaxMissingRate: if more than 75% of data is missing, BEAST will skip it.\n","\n","\n","#--------------------------------------------------#\n","#      OPTIONS used in the MCMC inference          #\n","#--------------------------------------------------#\n","\n","#......Start of displaying 'MetaData' ......\n","metadata                =  rb.args() ### or 'lambda: None': just get an empty object### # metadata is used to interpret the input data Y\n","metadata.season         = 'none'     # trend-only data with no periodic variation\n","metadata.startTime      = 1          # unknown unit\n","metadata.deltaTime      = 1          # unknown unit\n","metadata.maxMissingRate = 0.75       # if more than 75% of data is missing, BEAST will skip it.\n","metadata.detrend        = False      # if true,remove a global trend  cmpnt before running BEAST & add it back later\n","#........End of displaying MetaData ........\n","\n","#......Start of displaying 'prior' ......\n","prior                   =  rb.args() ### or 'lambda: None': just get an empty object### # prior is the true model parameters of BEAST\n","prior.trendMinOrder     = 0          # torder_minmax[0]: min trend polynomial order alllowed\n","prior.trendMaxOrder     = 1          # torder_minmax[1]: max trend polynomial order alllowed\n","prior.trendMinKnotNum   = 0          # tcp_minmax[0]   : min num of chngpts in trend allowed\n","prior.trendMaxKnotNum   = 10         # tcp_minmax[1]   : max num of chngpts in trend allowed\n","prior.trendMinSepDist   = 3          # tseg_min        : min trend segment length in terms of datapoints\n","prior.trendLeftMargin   = 3          # tseg_leftmargin : no trend chngpts in the first 3 datapoints\n","prior.trendRightMargin  = 3          # tseg_rightmargin: no trend chngpts in the last 3 datapoints\n","prior.K_MAX             = 22         # max number of terms in general linear model (relevant only at small values)\n","prior.precValue         = 1.5        # useful mainly when precPriorType='constant'\n","prior.modelPriorType    = 1         \n","prior.precPriorType     = 'uniform'\n","#......End of displaying prior ......\n","\n","#......Start of displaying 'mcmc' ......\n","mcmc                           =  rb.args() ### or 'lambda: None': just get an empty object### # mcmc is not BEAST parameters but MCMC sampler options\n","mcmc.seed                      = 0          # A nonzero seed to replicate among runs\n","mcmc.samples                   = 8000       # Number of samples saved per chain: the larger, the better\n","mcmc.thinningFactor            = 5          # Thinning the chain: the larger, the better \n","mcmc.burnin                    = 200        # Number of initial samples discarded: the larger, the better\n","mcmc.chainNumber               = 3          # Number of chains: the larger, the better\n","mcmc.maxMoveStepSize           = 6          # Max step of jumping from current changepoint: No need to change\n","mcmc.trendResamplingOrderProb  = 0.1        # Proposal probability of sampling trend polynominal order \n","mcmc.credIntervalAlphaLevel    = 0.95       # The alphal level for Credible Intervals\n","# Total number of models randomly visited in BEAST is (burnin+sampples*thinFactor)*chainNumber=120600\n","#......End of displaying mcmc ......\n","\n","#......Start of displaying 'extra' ......\n","extra                      =  rb.args() ### or 'lambda: None': just get an empty object### # extra is used to configure output/computing options\n","extra.dumpInputData        = True  # if true, dump a copy of the input data as o.data \n","extra.whichOutputDimIsTime = 1     # 1,2 or 3; which dim of the result is time; used for a 2D/3D input Y\n","extra.computeCredible      = False # if true, compute  credibiel interval of estimated Y (e.g., o.trend.CI)\n","extra.fastCIComputation    = True  # if true, do not sort but approximiate CI \n","extra.computeTrendOrder    = True  # if true, dump the estimated trend polynomial order \n","extra.computeTrendChngpt   = True  # if true, dump the trend changepoints (tcp) in the output \n","extra.computeTrendSlope    = True  # if true, dump the time-varying slope in trend\n","extra.tallyPosNegTrendJump = False # differentiate postive/negative jumps at tcp\n","extra.tallyIncDecTrendJump = False # differentiate increased/decreased slopes at tcp\n","extra.quiet                = False # if true, print nothing\n","extra.printProgress        = True  # if true, show an ascii progressbar\n","extra.printParameter       = True  # if true, print the parameters of the BEAST run\n","extra.printWarning         = True  # if true, print warnings, if any\n","extra.printCpuInfo         = False # if true, print the cpu info\n","extra.consoleWidth         = 85    # an integer specifying the console width for printing\n","extra.numThreadsPerCPU     = 2     # each cpu core spawns 2 concurrent threads (for beast123())\n","extra.numParThreads        = 0     # total number of threads (for beast123() only)\n","#......End of displaying extra ......\n","\n","\\Progress:100.0% done[==============================================================]\n"]},{"output_type":"execute_result","data":{"text/plain":["(<Figure size 640x480 with 5 Axes>,\n"," array([<Axes: xlabel='[]', ylabel='trend'>,\n","        <Axes: xlabel='[]', ylabel='Pr(tcp)'>,\n","        <Axes: xlabel='[]', ylabel='tOrder'>,\n","        <Axes: xlabel='[]', ylabel='slpsgn'>,\n","        <Axes: xlabel='time', ylabel='error'>], dtype=object))"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 5 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CIVDwfrIfTJ_","executionInfo":{"status":"ok","timestamp":1732121765042,"user_tz":360,"elapsed":3,"user":{"displayName":"Kevin Zhu","userId":"03020403504334482368"}},"outputId":"934aeb33-9807-4efc-f989-7c7885636c81"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Object of 9 field(s):\n","\n"," time        : [312 float32] \n"," data        : [312 float32] \n"," marg_lik    : -357.061 \n"," R2          : 0.915139 \n"," RMSE        : 7.78474 \n"," sig2        : 76.2222 \n"," trend       : [ 1 object with 18 fields] \n","               ncp            : 8.99308 \n","               ncp_median     : 9 \n","               ncp_mode       : 9 \n","               ncp_pct90      : 10 \n","               ncp_pct10      : 8 \n","               ncpPr          : [11 float32] \n","               cpOccPr        : [312 float32] \n","               order          : [312 float32] \n","               cp             : [10 float32] \n","               cpPr           : [10 float32] \n","               cpAbruptChange : [10 float32] \n","               cpCI           : [10x2 float32] \n","               Y              : [312 float32] \n","               SD             : [312 float32] \n","               slp            : [312 float32] \n","               slpSD          : [312 float32] \n","               slpSgnPosPr    : [312 float32] \n","               slpSgnZeroPr   : [312 float32] \n"," class       : 'beast'\n"," season_type : 'none'\n","\n","[1.         0.998917   0.9631251  0.76562524 0.70725024 0.69983363\n"," 0.67908347 0.28558347 0.2690003  0.2275418 ]\n","[10.]\n"]}]},{"cell_type":"code","source":["help(rb.beast)"],"metadata":{"id":"3vVAPQvlyMMZ","executionInfo":{"status":"ok","timestamp":1731262489539,"user_tz":-240,"elapsed":421,"user":{"displayName":"Christian Rodriguez","userId":"07094104738708536023"}},"outputId":"87ba9441-07a9-47f2-b70f-b557e18c3dba","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on function beast in module Rbeast.beast:\n","\n","beast(Y, start=1, deltat=1, season='harmonic', period=nan, scp_minmax=[0, 10], sorder_minmax=[0, 5], sseg_minlength=None, sseg_leftmargin=None, sseg_rightmargin=None, tcp_minmax=[0, 10], torder_minmax=[0, 1], tseg_minlength=None, tseg_leftmargin=None, tseg_rightmargin=None, method='bayes', detrend=False, deseasonalize=False, mcmc_seed=0, mcmc_burbin=200, mcmc_chains=3, mcmc_thin=5, mcmc_samples=8000, precValue=1.5, precPriorType='componentwise', hasOutlier=False, ocp_minmax=[0, 10], print_param=True, print_progress=True, print_warning=True, quiet=False, gui=False, dump_ci=False, dump_mcmc=False, **kwargs)\n","          \n","    ######################################################################################################\n","    Bayesian changepoint detection and time series decomposition for regular or irregular time series data\n","        \n","    The fitted model is:\n","         Y=trend+error             if data has no periodic/seasonal variation (i.e., season='none')\n","         Y=trend+seasonal+error    if data has periodic/seasonal variation \n","         Y=trend+outlier +error    if data is trend-only (no seasonal variation) but with potential outliers\n","         Y=trend+seasonal+outlier+error if data has periodic/seasonal variation and also has outliers\n","    where trend is a piecewise linear or polynomial function with an unknown number of trend changepoints to \n","    be inferred; seasonal is a piecewise periodic function with an unknown number of seasonal changepoints to \n","    be inferred; and the outlier component refers to potential spikes or dips at isolated data points and is \n","    included only if metadata.hasOutlierCmpnt=True (in beast123) or hasOutlier=True (in beast or beast_irreg)\n","    ######################################################################################################\n","      \n","    --------------------------------------------------------------------------------------------------\n","    *Quick Examples*:\n","    --------------------------------------------------------------------------------------------------\n","    import Rbeast as rb\n","        \n","    nile,yr =  rb.load_example('nile')             # annual flow of the Nile river\n","    rb.beast( nile, start=1871, season='none' )\n","        \n","    beach, year = rb.load_example('googletrend')   # the google search trend for 'beach'\n","    o = rb.beast(beach, start= 2004, deltat=1/12, period = 1.0)\n","    rb.plot(o) \n","        \n","    --------------------------------------------------------------------------------------------------    \n","    *Input arguments*:\n","    --------------------------------------------------------------------------------------------------\n","    Y:  a regular time series; it should be a numeric vector. For ireggular time series, use \n","        'beast_irreg' or 'beast123' instead. For multiple time series or stacked time series \n","        images such as satellite data, use 'beast123'.\n","     \n","    ... :  the remaining arguments are many paired keywords and values to specifiy time information \n","        or parameters for the beast algorithm. Check the R version of BEAST for detailed explanations\n","        (https://cran.r-project.org/web/packages/Rbeast/Rbeast.pdf). Below is a brief description.\n","    \n","    --------------------------------------------------------------------------------------------------  \n","    *Possible Keywords*:\n","    --------------------------------------------------------------------------------------------------   \n","    start: \n","             the start time of the regular time series. Possille values are\n","             (1) a numeric scalar (e.g., 2002.33); the unit is arbitrary \n","             (2) a vector of two values (Year, Month) (e.g., [2002,4] ) \n","             (3) a vector of three values (Year, Month, Day) (e.g., [2002,4,15] )\n","             (4) a date string (e.g., \"2002-4-15\", \"2002/04/15\", or \"2002/4\")\n","             (5) a datenum as a object variable ( e.g. rb.args( datenum=731320, origin='python'),\n","                 rb.args(year=2002, month=4, day=15) )         \n","    deltat: \n","             a number or string; the time interval between consecutive datapoints.. Use a string to specify the time unit\n","             (e.g., '1/12 year', '1.0 month', '30 days'). Possile units are year,\n","    period:  \n","             a number or string to specify the period if peridodic/seasonal variations \n","             are present in the data. If period is given a zero, negative value or 'none' \n","             it suggests no seasonal/periodic component in the signal. (season='none'\n","             also suggests no periodic component).\n","             In earlier versions, 'freq' was used to specify the period and\n","             now deprecated in this version. If period is given as anumber, the unit of 'period', \n","             if any, should be consistent with the unit of 'deltat'. If given as a string,\n","             the unit of period needs to be expicilty specified (e.g., '1 year', '12 mon', '365 days')\n","    season: \n","             a string specifier. Possible values - (1) 'none':  trend-only data with no \n","             seasonality; (2)'harmonic': the seasonal/peridoic  component modelled via \n","             harmonic curves; (3)'dummy': the seasonal component  modelled via a dummy \n","             basis (i.e., pulse-like bases); (4)'svd': svd-derived  bases (experimental \n","             feature)\n","    scp_minmax: \n","             a vector of two integers (e.g.,[0,5]); the min and max number of\n","             seasonal changepoints allowed\n","    sorder_minmax: \n","             a vector of two integers (e.g.,[1,3]); the min and max harmonic orders of\n","             seasonal changepoints (scp) allowed\n","    sseg_minlength: \n","             an integer; the min length of the segment for the seasonal component \n","             i.e., the min distance between neighorbing changepoints)\n","    sseg_leftmargin: \n","             an integer;  the number of leftmost data points excluded for seasonal changepoint detection.\n","             That is,  no changepoints are allowed in the starting window/segment of length sseg_leftmargin. \n","             sseg_leftmargin must be an unitless integer–the number of time intervals/data points so that the\n","             time window in the original unit is sseg_leftmargin*deltat. If missing, sseg_leftmargin defaults\n","             to the minimum segment length 'sseg_min'\n","    sseg_rightmargin: \n","             an integer;  the number of rightmost data points excluded for seasonal changepoint detection.\n","             That is,  no changepoints are allowed in the ending window/segment of length sseg_rightmargin. \n","             sseg_rightmargin must be an unitless integer–the number of time intervals/data points so that the\n","             time window in the original unit is sseg_rightmargin*deltat. If missing, sseg_rightmargin defaults\n","             to the minimum segment length 'sseg_min'                \n","    tcp_minmax: \n","             a vector of two integers (e.g.,[0,5]); the min and max numbers of\n","             trend changepoints (tcp) allowed\n","    torder_minmax: \n","             a vector of two integers (e.g.,[1,3]); the min and max orders of\n","             polynomials used to model the trend\n","    tseg_minlength: \n","             an integer; the min length of the segment for the trend component (i.e.,\n","             the min distance between neighorbing changepoints)\n","    tseg_leftmargin: \n","             an integer; the number of leftmost data points excluded for trend changepoint detection.\n","             That is,  no trend changepoints are allowed in the starting window/segment of length tseg_leftmargin. \n","             tseg_leftmargin must be an unitless integer–the number of time intervals/data points so that the\n","             time window in the original unit is tseg_leftmargin*deltat. \n","    tseg_rightmargin: \n","             an integer;  the number of rightmost data points excluded for trend changepoint detection.\n","             That is,  no trend changepoints are allowed in the ending window/segment of length tseg_rightmargin. \n","             tseg_rightmargin must be an unitless integer–the number of time intervals/data points so that the\n","             time window in the original unit is tseg_rightmargin*deltat.\n","    method: \n","             a string specifying which method to formulat model posterior probability. Possible values are\n","             (1) 'bayes': the full Bayesian formulation (this is the default)  \n","             (2)'bic':  approximation of posterior probability using the Bayesian information criterion (bic)\n","             (3)'aic':  approximation of posterior probability using the Akaike information criterion (aic)\n","             (4)'aicc': approximation of posterior probability using the corrected Akaike information criterion (aicc)\n","             (5)'hic':  approximation of  posterior probability using the Hannan–Quinn information criterion  (hic)\n","             (6)'bic0.25':  approximation using the Bayesian information criterion adopted from Kim et al. (2016) <doi: \n","                  10.1016/j.jspi.2015.09.008>; bic0.25=n*ln(SSE)+0.25k*ln(n) with less complexity penelaty than the standard BIC.\n","             (7)'bic0.50': the same as above except that the penalty factor is 0.50.\n","             (8)'bic1.5':  the same as above except that the penalty factor is 1.5.\n","             (9)'bic2':    the same as above except that the penalty factor is 2.0.\n","    deseasonalize: \n","             boolean; if true, the input time series will be first de-seasonalized before applying\n","             beast by removing a global seasonal component\n","    detrend: \n","             boolean; if true, the input time series will be first de-trend before applying \n","             beast by removing a global trend  \n","    mcmc_seed: \n","             a seed for the random number generator; set it to a non-zero integer to\n","             reproduce the results among different runs\n","    mcmc_samples: \n","             number of MCMC samples collected; the larger, the better\n","    mcmc_thin: \n","             a thinning factor for MCMC chains: take every 'mcmc.thin'-th sample\n","    mcmc_burnin: \n","             the number of initial samples of each chain to be discarded\n","    mcmc_chains: \n","             the number of MCMC chains; the larger, the better but with more computation. \n","    precValue:\n","             numeric (>0); the hyperparameter of the precision prior; the default value is 1.5. precValue\n","             is useful only when precPriorType='constant', as further explained below\n","    precPriorType:\n","             a string taking one of 'constant', 'uniform',  'componentwise' (default), and 'orderwise'.\n","             (1) 'constant':  the precision parameter used to parameterize the model coefficients is fixed to\n","               a const specified by precValue. In other words, precValue is a user-defined hyperparameter \n","               and the fitting result may be sensitive to the chosen values of precValue.\n","             (2) 'uniform':  the precision parameter used to parameterize the model coefficients is a random variable;\n","               its initial value is specified by precValue. In other words, precValue will be inferred by the MCMC,\n","               so the fitting result will be insensitive to the chose inital value of precValue.\n","             (3) 'componentwise': multiple precision parameters are used to parameterize the model coefficients for\n","               individual components (e.g., one for season and another for trend); their initial values is specified \n","               by precValue. In other words, precValue will be inferred by the MCMC, so the fitting result will be \n","               insensitive to the choice in precValue.\n","             (4) 'orderwise'}: multiple precision parameters are used to parameterize the model coefficients not just for \n","               individual components but also for individual orders of each component; their initial values is specified \n","               by precValue. In other words, precValue will be inferred by the MCMC, so the fitting result will be \n","               insensitive to the choice in precValue. \n","    hasOutlier:\n","            boolean; if true, the model with an outlier component will be fitted (if season='none',\n","            Y=trend+outlier+error, or if season ~= 'none', Y=trend+season+outlier+error).           \n","    ocp_minmax:\n","            a vector of 2 integers (>=0); the min and max numbers of outlier-type changepoints (ocp) allowed in the time series.\n","            Ocp refers to spikes or dips at isolated times that can't be modeled as trends or seasonal terms.\n","    print_param: \n","             boolean; if true, print the beast paramers.             \n","    print_progress: \n","             boolean; if true, print a progress bar\n","    print_warning: \n","             boolean; if true, print warning messages\n","    quiet:\n","             boolean; if true, supress all the messages and printing                \n","    dump_ci: \n","             boolean; if true, credible intervals (i.e., out.season.CI or out.trend.CI) will be computed \n","             for the estimated seasonal and trend components. Computing CI is time-consuming, due to sorting, \n","             so set dump_ci=Flase if a symmetric credible interval (i.e., out.trend.SD and out.season.SD) suffices.                  \n","    dump_mcmc:\n","             boolean; if true, dump the sampled models in the MCMC chains\n","    gui: \n","             boolean; if true, show a gui to demostrate the MCMC sampling; runs only \n","             on Windows not Linux or MacOS\n","                     \n","    ######################################################################################################\n","    The keywords for beast() are converted to 'metadata', 'prior','mcmc', and 'extra' options used \n","    in the beast123() interface. Examples are:\n","             deseasonalize <-> metadata.deseasonalize\n","                     hasOutlier    <-> metadata.hasOutlierCmpnt              \n","             scp_minmax[0] <-> prior.seasonMinOrder\n","             scp_minmax[1] <-> prior.seasonMaxOrder\n","             sseg_min      <-> prior.seasonMinSepDist\n","             mcmc_seed     <-> mcmc.seed\n","             tcp_minmax[0] <-> prior.trendMinKnotNumber\n","             tcp_minmax[1] <-> prior.trendMaxKnotNumber\n","             dump_ci       <-> extra.computeCredible\n","    Experts should use the the beast123 function.\n","    ######################################################################################################           \n","     \n","    -------------------------------------------------------------------------------------------------- \n","    *Result/Output*: The output is a struct variable; example of the fields include\n","    --------------------------------------------------------------------------------------------------\n","            marg_lik: marginal likilood; the larger, the better\n","            sig2    : variance  of error\n","            trend   : the trend component; a struct variable (say, T)\n","            season  : the season componet; a stuct variable  (say,S)\n","            The subfields of trend or season:\n","            .ncpPr        : the prob distribution for number of changepoints\n","            .ncp          : mean number of changepoints in trend or seasonality\n","            .ncp_meidan   : median number of changepoints\n","            .ncp_mode     : mode from ncpPr\n","            .ncp_pct90    : 90% percentile from ncpPr\n","            .cpOccPr      : changepoint occurrance probability over time\n","            .cp           : list of all possible changepoints (many are not sigficant)\n","            .cpPr         : occurrence probability of the changepoints in cp\n","            .cpAbruptChange: the sudden changes in trend or seasonlity at cp\n","            .cpCI         : confidence interval of the cps\n","            .Y            : the fitted trend or seasonality \n","            .SD           : standard deviation of the fitted Y\n","            .CI           : Credible interval of the fittted Y\n","            .order   : the mean harmonic or polynomial orders estimated to fit the seasonal and trend     \n","            trend.slp     : slope of the trend \n","            trend.slpSD   : standard dev of the estimated slope\n","            trend.slpSgnPosPr: time-varying probability of the slope being postive\n","            trend.slpSgnZeroPr: time-varying probability of the slope being 0\n","            season.amp     : amplitue of the estiamted seasonality overtime\n","            season.ampSD   : standard ev of the estiamated amplitude\n","    \n","    -------------------------------------------------------------------------------------------------- \n","    More help:  \n","    --------------------------------------------------------------------------------------------------\n","           This terse help doc sucks (I know); so far, the best details are still the\n","           R help doc, available at https://cran.r-project.org/web/packages/Rbeast/Rbeast.pdf.\n","           Python doesn't allow a '.' in variable names, so Python's equivalent to R's \n","           beast(Y,start=1987,tcp.minmax=c(0,5)) is beast(Y, start=1987,  tcp_minmax=[0, 5]).\n","           \n","    --------------------------------------------------------------------------------------------------\n","    Examples:\n","    --------------------------------------------------------------------------------------------------\n","    import Rbeast as rb\n","    \n","    # Nile river annual streamflow: trend-only data\n","    Nile, yr=rb.load_example('nile')      \n","    o = rb.beast(Nile, start=1871, season='none') \n","    rb.print(o)\n","    rb.plot(o)\n","    \n","    # Explicitly specify deltat=1. beast knows nothing about the unit\n","    # of 1871 and 1.0 (i.e., 1871 years, 1871 seconds, or 1871 meters?) \n","    o=rb.beast(Nile, start=1871, deltat=1.0, season='none') \n","     \n","    # start is given a Date 1871-1 (Year-Mon). Then, the time unit is\n","    # fractional/decimal year. delta=1.0 means 1.0 year\n","    o=rb.beast(Nile, start=[1871,1], deltat=1.0, season='none') \n","     \n","    # period=0 means a trend-only signal, which is equivalent to season='none'\n","    o=rb.beast(Nile, start=1871, deltat=1, period=0) \n","     \n","    # Use a string to specify a unit for deltat or period (e.g., deltat='1 year')\n","    # The time unit is also fractional year. 1871 means Year 1871\n","    o=rb.beast(Nile, start=1871, deltat='1 year', period=0) \n","     \n","    # Use a string to specify a unit for delta or period (e.g., deltat='12 mo')\n","    # The time unit is fractional year. 1871 means Year 1871\n","    o=rb.beast(Nile, start=1871, deltat='12 mo', period=0) \n","     \n","    #Do not print the options \n","    o=rb.beast(Nile, start=1871, deltat=1.0, season='none',print_options=False)\n","     \n","    # Show a gui window to demostrate the beast sampling process in\n","    # real-time (for Windows only not Linux and MacOS)% \n","    rb.beast(Nile,season='none', gui=True, start=1871) \n","     \n","    \n","    ## Monthly google search popularity of the keyword 'beach'\n","    beach, time = rb.load_example('googletrend')   \n","    \n","    # If not specfified, season='harmonic' is assumed by default, with a seasonal \n","    # component fitted.\n","    o = rb.beast(beach, start=[2004,1], deltat=1/12)  # deltat = 1/12 yr =1 month\n","    rb.print(o)\n","    rb.plot(o)\n","    rb.plot(o,ncpStat='median')\n","     \n","    # delta  = 1/12: for dates, the default unit is year, so delta=1/12yr=1 month;       \n","    # period = 1.0 means 1 year\n","    o=rb.beast(beach, start='2004-1-15', deltat=1/12, period=1.0)  \n","     \n","    # period='12 month': use a string to explicitly specify the unit      \n","    o=rb.beast(beach, start=[2004,1], deltat=1/12,      period='12 month')\n","    o=rb.beast(beach, start=[2004,1], deltat='1 month', period='365 days')\n","     \n","    ## Monthly air co2 data since 1959: deltaTime=1/12 year\n","    co2, time = rb.load_example('co2')     \n","    o = rb.beast(co2, start=[1959,1,15],  deltat=1/12,  period=1.0)\n","    rb.print(o)\n","    rb.plot(o)\n","    rb.plot(o,ncpStat='median')\n","     \n","    ## Daily covid-19 infection statistics \n","    covid=rb.load_example('covid19')    \n","    Y       = covid.newcases\n","    datestr = covid.date\n","    import numpy as np\n","    Y       = np.sqrt(Y)     # a sqrt-root transformation\n","    \n","    % the min length of seasonal segments is set to 30 data points\n","    o=rb.beast(Y, start=[2020,1,22],  deltat=1/365,  period=7/365, sseg_min=30)\n","    rb.print(o)\n","    rb.plot(o)\n","     \n","    # Use a string to specify delta with a unit\n","    o=rb.beast(Y, start=[2020,1,22], deltat='1.0 day',  period='7days', sseg_min=30)\n","     \n","    # Use a string to specify delta with a unit\n","    o=rb.beast(Y, start=[2020,01,22], deltat='1.0 day',  period='7days', sseg_min=30)\n","     \n","    Contact info: To report bug or get help, do not hesitate to contact Kaiguang Zhao\n","    at zhao.1423@osu.edu.\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dY-5cXMSO50I"},"execution_count":null,"outputs":[]}]}